/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulator;

import swing.ManualListCellRenderer;
import model.ArthurInfo;
import model.ArthurSkill;
import model.EnemyBasicInfo;
import model.EnemyInfo;
import model.EnemySkill;
import model.Enums;
import model.Enums.EnumLevel;
import model.Enums.EnumType;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.Constants;
import model.Enums.EnumArthur;
import preprocessing.EnemyInfoGenerator;
import swing.InformationDialog;
import util.FileUtils;
import util.TextUtil;
import util.UIUtil;

/**
 *
 * @author Shadow
 */
public class BattlePrepare extends javax.swing.JPanel {

    /**
     * Creates new form BattlePrepare
     */
    public BattlePrepare() {
        initComponents();
        initComponentsByCode();
        initData();
        initListener();
        //testLoad();
    }

    private void testLoad() {
        loadDeck(0, "Merc1.MADeck");
        loadDeck(1, "Mill1.MADeck");
        loadDeck(2, "Thief1.MADeck");
        loadDeck(3, "Singer1.MADeck");
    }

    private void loadDeck(int index, String filePath) {
        File file = new File(filePath);
        if (file != null) {
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
                deckLists[index] = new ArrayList<>();
                for (String str : br.readLine().split(",")) {
                    deckLists[index].add(str);
                }
                refreshList(index);
                refreshAttributes(index);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        startBattleSimu = new javax.swing.JButton();
        OutputEnemyData = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEnemyInfo = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();

        jLabel2.setText("jLabel2");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("外敌选择"));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "常驻妖精", "超级妖精", "3D-BOSS" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("类别：");

        jLabel3.setText("外敌名称：");

        jLabel4.setText("难度：");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 31, Short.MAX_VALUE))
        );

        startBattleSimu.setText("开始战斗模拟");
        startBattleSimu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBattleSimuActionPerformed(evt);
            }
        });

        OutputEnemyData.setText("输出外敌信息");
        OutputEnemyData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputEnemyDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(OutputEnemyData, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startBattleSimu, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBattleSimu, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OutputEnemyData, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("外敌情报"));

        jScrollPane1.setBorder(null);

        tblEnemyInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "部件名称", "属性", "HP", "物理攻击", "魔法攻击", "支援值", "物理防御", "魔法防御", "克制倍率"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEnemyInfo.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tblEnemyInfo);
        if (tblEnemyInfo.getColumnModel().getColumnCount() > 0) {
            tblEnemyInfo.getColumnModel().getColumn(0).setPreferredWidth(100);
            tblEnemyInfo.getColumnModel().getColumn(1).setPreferredWidth(40);
            tblEnemyInfo.getColumnModel().getColumn(2).setPreferredWidth(65);
            tblEnemyInfo.getColumnModel().getColumn(3).setPreferredWidth(60);
            tblEnemyInfo.getColumnModel().getColumn(4).setPreferredWidth(60);
            tblEnemyInfo.getColumnModel().getColumn(5).setPreferredWidth(60);
            tblEnemyInfo.getColumnModel().getColumn(6).setPreferredWidth(60);
            tblEnemyInfo.getColumnModel().getColumn(7).setPreferredWidth(60);
            tblEnemyInfo.getColumnModel().getColumn(8).setPreferredWidth(400);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 828, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startBattleSimuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBattleSimuActionPerformed
        String str = isReadyForBattle();
        if (str == null) {
            new Thread(() -> {
                InformationDialog dialog = UIUtil.showInfoDialog(UIUtil.getMainFrame(), "资源载入中……");
                startBattleSimu();
                UIUtil.hideInfoDialog(dialog);
            }).start();
        } else {
            JOptionPane.showMessageDialog(this, str, "注意", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_startBattleSimuActionPerformed

    private void OutputEnemyDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputEnemyDataActionPerformed
        outputEnemyData();
    }//GEN-LAST:event_OutputEnemyDataActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OutputEnemyData;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton startBattleSimu;
    private javax.swing.JTable tblEnemyInfo;
    // End of variables declaration//GEN-END:variables
    private List<JPanel> classPanels;
    private List<JPanel> attrPanels;
    private List<JList> cardLists;
    private List<JList> sphereLists;
    private List<JButton> loadCardButtons;
    private List<GroupLayout> classGroupLayouts;
    private List<GroupLayout> attrGroupLayouts;
    private List<List<JLabel>> attrLabels;
    private List<List<JLabel>> attrValLabels;
    private final String[] className = new String[]{"佣兵亚瑟", "富豪亚瑟", "盗贼亚瑟", "歌姬亚瑟"};
    private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(BattlePrepare.class);

    private void initComponentsByCode() {

        String[] attrName = new String[]{"HP", "物攻", "魔攻", "治疗量"};
        classPanels = new ArrayList<>();
        attrPanels = new ArrayList<>();
        cardLists = new ArrayList<>();
        sphereLists = new ArrayList<>();
        loadCardButtons = new ArrayList<>();
        classGroupLayouts = new ArrayList<>();
        attrGroupLayouts = new ArrayList<>();
        attrLabels = new ArrayList<>();
        attrValLabels = new ArrayList<>();

        for (int i = 0; i < 4; i++) {
            final int n = i;
            classPanels.add(new JPanel());
            attrPanels.add(new JPanel());
            cardLists.add(new JList());
            sphereLists.add(new JList());
            loadCardButtons.add(new JButton());

            attrLabels.add(new ArrayList<>());
            attrValLabels.add(new ArrayList<>());
            for (int j = 0; j < 4; j++) {
                attrLabels.get(i).add(new JLabel());
                attrLabels.get(i).get(j).setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                attrLabels.get(i).get(j).setText(attrName[j]);

                attrValLabels.get(i).add(new JLabel());
                attrValLabels.get(i).get(j).setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                attrValLabels.get(i).get(j).setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            }

            classPanels.get(i).setBorder(javax.swing.BorderFactory.createTitledBorder(className[i]));
            attrPanels.get(i).setBorder(javax.swing.BorderFactory.createTitledBorder("基本属性"));

            classGroupLayouts.add(new GroupLayout(classPanels.get(i)));
            attrGroupLayouts.add(new GroupLayout(attrPanels.get(i)));

            classPanels.get(i).setLayout(classGroupLayouts.get(i));
            attrPanels.get(i).setLayout(attrGroupLayouts.get(i));

            attrGroupLayouts.get(i).setHorizontalGroup(attrGroupLayouts.get(i).createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(attrGroupLayouts.get(i).createSequentialGroup()
                            .addContainerGap()
                            .addGroup(attrGroupLayouts.get(i).createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attrGroupLayouts.get(i).createSequentialGroup()
                                            .addComponent(attrLabels.get(i).get(0), javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(attrValLabels.get(i).get(0), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(attrGroupLayouts.get(i).createSequentialGroup()
                                            .addComponent(attrLabels.get(i).get(1), javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(attrValLabels.get(i).get(1), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(attrGroupLayouts.get(i).createSequentialGroup()
                                            .addComponent(attrLabels.get(i).get(2), javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(attrValLabels.get(i).get(2), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(attrGroupLayouts.get(i).createSequentialGroup()
                                            .addComponent(attrLabels.get(i).get(3), javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(attrValLabels.get(i).get(3), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addContainerGap())
            );
            attrGroupLayouts.get(i).setVerticalGroup(attrGroupLayouts.get(i).createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(attrGroupLayouts.get(i).createSequentialGroup()
                            .addGroup(attrGroupLayouts.get(i).createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(attrLabels.get(i).get(0), javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(attrValLabels.get(i).get(0), javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(attrGroupLayouts.get(i).createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(attrLabels.get(i).get(1), javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(attrValLabels.get(i).get(1), javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(attrGroupLayouts.get(i).createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(attrLabels.get(i).get(2), javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(attrValLabels.get(i).get(2), javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(attrGroupLayouts.get(i).createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(attrLabels.get(i).get(3), javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(attrValLabels.get(i).get(3), javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
            );

            classGroupLayouts.get(i).setHorizontalGroup(
                    classGroupLayouts.get(i).createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attrPanels.get(i), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sphereLists.get(i), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cardLists.get(i), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadCardButtons.get(i), javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
            );
            classGroupLayouts.get(i).setVerticalGroup(
                    classGroupLayouts.get(i).createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(classGroupLayouts.get(i).createSequentialGroup()
                            .addComponent(cardLists.get(i), javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addGap(5, 5, 5)
                            .addComponent(sphereLists.get(i), 90, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(5, 5, 5)
                            .addComponent(attrPanels.get(i), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(2, 2, 2)
                            .addComponent(loadCardButtons.get(i), javax.swing.GroupLayout.DEFAULT_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(5, 5, 5))
            );

            cardLists.get(i).setBackground(new java.awt.Color(240, 240, 240));
            cardLists.get(i).setBorder(javax.swing.BorderFactory.createTitledBorder("卡组"));
            cardLists.get(i).setModel(new DefaultListModel());
            cardLists.get(i).setCellRenderer(new ManualListCellRenderer());

            sphereLists.get(i).setBackground(new java.awt.Color(240, 240, 240));
            sphereLists.get(i).setBorder(javax.swing.BorderFactory.createTitledBorder("Sphere"));
            sphereLists.get(i).setModel(new DefaultListModel());
            ListCellRenderer lcr = new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(JList list, Object value,
                        int index, boolean isSelected, boolean cellHasFocus) {
                    list.setToolTipText(value + " | " + TextUtil.getSphereDescription(sphereMap.get(classSphereList[n].get(index))));
                    return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                }
            };
            sphereLists.get(i).setCellRenderer(lcr);
            //sphereLists.get(i).setCellRenderer(new ManualListCellRenderer());

            loadCardButtons.get(i).setText("载入卡组");
        }

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(classPanels.get(0), javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classPanels.get(1), javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classPanels.get(2), javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classPanels.get(3), javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        //.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(classPanels.get(0), javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(classPanels.get(1), javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(classPanels.get(2), javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(classPanels.get(3), javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

    }

    private HashMap<String, String[]> enemyMap;
    private HashMap<String, String[]> cardDataMap;
    private List<String[]> enemyPartyList;
    private HashMap<String, String[]> enemyPartyMap;
    private HashMap<String, String[]> enemyLvUpMap;
    private List<String>[] deckLists;
    private List<String>[] classSphereList;
    private HashMap<String, Integer[]> classAttrMap;
    private HashMap<String, String[]> sphereMap;

    private HashMap<String, List<String[]>> skillMap;
    private HashMap<String, List<String[]>> skillRoleMap;
    private HashMap<String, String[]> enemyAiOrderMap;

    private HashMap<String, List<String[]>> classifiedEnemyMap;
    private List<EnemyBasicInfo> classifiedEnemyList;

    private void initData() {
        cardDataMap = FileUtils.loadMap("card_data.csv");
        enemyMap = FileUtils.loadMap("enemy.csv");
        enemyPartyList = FileUtils.loadList("enemy_party.csv");
        enemyPartyMap = FileUtils.loadMap("enemy_party.csv");
        enemyLvUpMap = FileUtils.loadMap("enemy_lvup.csv");
        sphereMap = FileUtils.loadMap("sphere_data.csv");
        skillMap = FileUtils.loadListMap("skill_player.csv", null);
        skillMap = FileUtils.loadListMap("skill_enemy.csv", skillMap);
        skillRoleMap = FileUtils.loadListMap("skill_role_player.csv", null);
        skillRoleMap = FileUtils.loadListMap("skill_role_enemy.csv", skillRoleMap);
        enemyAiOrderMap = FileUtils.loadMap("enemy_ai_order.csv");

        classifiedEnemyMap = new HashMap<>();
        classifiedEnemyList = new ArrayList<>();

        for (String[] array : enemyPartyList) {
            String id = array[0].substring(0, 7);
            if (!classifiedEnemyMap.containsKey(id)) {
                classifiedEnemyMap.put(id, new ArrayList<>());
                classifiedEnemyList.add(new EnemyBasicInfo(id, enemyMap.get(array[2])[4]));
            }
            classifiedEnemyMap.get(id).add(array);
        }

        classSphereList = new ArrayList[4];
        for (int i = 0; i < 4; i++) {
            classSphereList[i] = new ArrayList<>();
        }
        loadSphere();

        classAttrMap = new HashMap<>();
        classAttrMap.put("佣兵亚瑟", new Integer[]{2650, 480, 50, 190});
        classAttrMap.put("富豪亚瑟", new Integer[]{4620, 330, 70, 40});
        classAttrMap.put("盗贼亚瑟", new Integer[]{2080, 100, 480, 240});
        classAttrMap.put("歌姬亚瑟", new Integer[]{2190, 50, 330, 480});

        deckLists = new ArrayList[4];
    }

    private void initListener() {
        jComboBox2.setModel(new DefaultComboBoxModel());
        jComboBox3.setModel(new DefaultComboBoxModel());

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshCategory();
            }
        });

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshLevel();
            }
        });

        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshEnemyInfo();
            }
        });

        for (int i = 0; i < 4; i++) {
            final int j = i;
            loadCardButtons.get(i).addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    loadDeck(j);
                }
            });
        }

        jComboBox1.setSelectedIndex(0);
    }

    public void loadSphere() {
        File file = new File("Records.MASphere");
        if (!file.exists() || file.isDirectory()) {
            return;
        }
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
            for (int i = 0; i < 4; i++) {
                List<String> spheres = classSphereList[i];
                spheres.clear();
                ((DefaultListModel) sphereLists.get(i).getModel()).removeAllElements();
                for (String str : br.readLine().split(",")) {
                    if (str.isEmpty()) {
                        continue;
                    }
                    spheres.add(str);
                    ((DefaultListModel) sphereLists.get(i).getModel()).addElement(sphereMap.get(str)[1]);
                }
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadDeck(int index) {
        File file = FileUtils.getChooser().showOpenDialog();
        if (file != null) {
            FileUtils.setCurrentPath(file.getParent());
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
                deckLists[index] = new ArrayList<>();
                for (String str : br.readLine().split(",")) {
                    deckLists[index].add(str);
                }
                refreshList(index);
                refreshAttributes(index);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void refreshList(int index) {
        DefaultListModel model = (DefaultListModel) cardLists.get(index).getModel();
        model.removeAllElements();
        for (String str : deckLists[index]) {
            model.addElement(cardDataMap.get(str)[5]);
        }
    }

    private void refreshAttributes(int index) {
        Integer[] attr = classAttrMap.get(className[index]);
        Integer[] totalAttr = new Integer[4];
        for (int i = 0; i < attrValLabels.get(index).size(); i++) {
            totalAttr[i] = attr[i];
            for (int j = 0; j < deckLists[index].size(); j++) {
                if (j == 0) {
                    totalAttr[i] += new BigDecimal(Integer.parseInt(cardDataMap.get(deckLists[index].get(j))[i + 10])).multiply(new BigDecimal(1.5)).intValue();
                } else {
                    totalAttr[i] += Integer.parseInt(cardDataMap.get(deckLists[index].get(j))[i + 10]);
                }
            }
            attrValLabels.get(index).get(i).setText(totalAttr[i].toString());
        }
    }

    private void refreshCategory() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) jComboBox2.getModel();
        model.removeAllElements();

        String category = (String) jComboBox1.getSelectedItem();
        for (EnemyBasicInfo info : classifiedEnemyList) {
            if (matchCategory(category, info)) {
                model.addElement(info);
            }
        }
    }

    private void refreshLevel() {
        if (jComboBox2.getSelectedIndex() == -1) {
            return;
        }
        DefaultComboBoxModel model = (DefaultComboBoxModel) jComboBox3.getModel();
        model.removeAllElements();
        EnemyBasicInfo enemy = (EnemyBasicInfo) jComboBox2.getSelectedItem();

        String level;
        for (String[] arr : classifiedEnemyMap.get(enemy.getId())) {
            level = arr[2].substring(6, 7);
            model.addElement(EnumLevel.getName(level));
        }
    }

    private void refreshEnemyInfo() {
        if (jComboBox3.getSelectedIndex() == -1) {
            return;
        }
        EnemyBasicInfo enemy = (EnemyBasicInfo) jComboBox2.getSelectedItem();
        String enemyId = classifiedEnemyMap.get(enemy.getId()).get(jComboBox3.getSelectedIndex())[0];

        DefaultTableModel model = (DefaultTableModel) tblEnemyInfo.getModel();
        model.setRowCount(0);

        String[] partyArray = enemyPartyMap.get(enemyId);
        for (int i = 2; i < 12; i += 3) {
            String enemyPartId = partyArray[i];
            if (!enemyPartId.isEmpty()) {
                addEnemyInfoToTable(model, enemyPartId);
            }
        }
    }

    private void addEnemyInfoToTable(DefaultTableModel model, String enemyPartId) {
        String[] enemyPartArray = enemyMap.get(enemyPartId);
        String[] enemyPartLvUpArray = enemyLvUpMap.get(enemyPartId);
        Object[] row = new Object[9];
        int i = 0;
        row[i++] = enemyPartArray[4];
        row[i++] = EnumType.getNameById(enemyPartArray[5]);
        row[i++] = enemyPartArray[6];
        row[i++] = enemyPartArray[7];
        row[i++] = enemyPartArray[8];
        row[i++] = enemyPartArray[9];
        row[i++] = enemyPartArray[10];
        row[i++] = enemyPartArray[11];
        row[i++] = findTypeRate(enemyPartLvUpArray, enemyPartArray[5]);
        model.addRow(row);
    }

    public String findTypeRate(String[] enemyPartLvUpArray, String type) {
        String[] atkRate = {"火", "冰", "风", "光", "暗"};
        StringBuilder sb = new StringBuilder();
        Integer rate;
        for (int i = 0; i < 5; i++) {
            rate = Integer.parseInt(enemyPartLvUpArray[i + 2]);
            if (rate == 100) {
                rate = EnumType.getNormalRateByName(atkRate[i], type);
            } else if (rate == 0) {
                rate = 100;
            }
            sb.append(atkRate[i]).append(rate).append("% ");
        }
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }

    private boolean matchCategory(String category, EnemyBasicInfo info) {
        List<String[]> enemys = classifiedEnemyMap.get(info.getId());
        switch (category) {
            case "常驻妖精":
                int maxlevel;
                HashSet<Integer> levels = new HashSet<>();
                if (!enemys.get(0)[1].isEmpty()) {
                    return false;
                }
                for (String[] arr : enemys) {
                    maxlevel = Integer.parseInt(arr[2].substring(6, 7));
                    if (maxlevel > 3) {
                        return false;
                    }
                    levels.add(maxlevel);
                }
                if (levels.contains(1) && levels.contains(2) && levels.contains(3)) {
                    return true;
                }
                break;
            case "超级妖精":
                int level;
                if (!enemys.get(0)[1].isEmpty()) {
                    return false;
                }
                for (String[] arr : enemys) {
                    level = Integer.parseInt(arr[2].substring(6, 7));
                    if (level > 3) {
                        return true;
                    }
                }
                break;
            case "3D-BOSS":
                if (!enemys.get(0)[1].isEmpty()) {
                    return true;
                }
                break;
            default:
                return false;
        }
        return false;
    }

    public static void main(String[] args) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFrame frame = new JFrame();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setSize(900, 600);
                BattlePrepare bp = new BattlePrepare();
                frame.add(bp);
                frame.setVisible(true);

                FileUtils.initDummy();
            }
        });

    }

    private String isReadyForBattle() {
        for (int i = 0; i < deckLists.length; i++) {
            if (deckLists[i] == null) {
                return EnumArthur.getNameByIndex(i) + "的卡组未载入，无法开始战斗。";
            } else if (deckLists[i].size() < 10) {
                return EnumArthur.getNameByIndex(i) + "的卡组不足10张，无法开始战斗。";
            }
        }
        return null;
    }

    private void startBattleSimu() {
        EnemyBasicInfo enemy = (EnemyBasicInfo) jComboBox2.getSelectedItem();
        String enemyPartyId = classifiedEnemyMap.get(enemy.getId()).get(jComboBox3.getSelectedIndex())[0];
        List<EnemyInfo> enemyList = prepareEnemy(enemyPartyId);
        List<ArthurInfo> arthurList = prepareArthur();
        if (UIUtil.getBattleSimu() == null) {
            BattleSimu BattleSimu = new BattleSimu(enemyPartyId, arthurList, enemyList, skillMap, skillRoleMap, enemyAiOrderMap);
            UIUtil.setBattleSimu(BattleSimu);
            ((MainFrame) UIUtil.getMainFrame()).switchPanel("battle_simu");
        } else {
            BattleSimu BattleSimu = (BattleSimu) UIUtil.getBattleSimu();
            BattleSimu.setEnemyPartyId(enemyPartyId);
            BattleSimu.setEnemyList(enemyList);
            BattleSimu.setArthurList(arthurList);
            BattleSimu.prepareBattle();
            ((MainFrame) UIUtil.getMainFrame()).switchPanel("battle_simu");
        }
    }

    public List<ArthurInfo> prepareArthur() {
        String[] name = new String[]{"MERCENARY", "MILLIONARE", "THIEF", "SINGER"};
        List<ArthurInfo> arthurList = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            ArthurInfo arthur = new ArthurInfo();
            arthur.setId(name[i]);
            arthur.setName(className[i]);
            arthur.setPartIndex(i);

            HashMap<String, ArthurSkill> spheres = new HashMap<>();
            List<String> sphereList = new ArrayList<>();
            for (String sphere : classSphereList[i]) {
                String[] array = sphereMap.get(sphere);
                ArthurSkill skill = new ArthurSkill();
                skill.setSkillId(sphere);
                skill.setCardName(array[1]);
                skill.setDescription("【第" + (Integer.parseInt(array[11]) + 1) + "回合起可用】" + array[13]);
                skill.setBriefDescription(array[14]);
                skill.setIsSphere(true);
                skill.setTurnAllowedAfter(Integer.parseInt(array[11]));
                skill.setRarity("SPHERE");
                skill.setArthurIndex(i);
//                skill.setSkill(skillMap.get(skill.getSkillId()));
//                skill.setSkillRole(new HashMap<>());
//                for (String[] arr : skill.getSkill()) {
//                    skill.getSkillRole().put(arr[27], skillRoleMap.get(arr[27]));
//                }
                spheres.put(skill.getSkillId(), skill);
                sphereList.add(skill.getSkillId());
            }
            arthur.setSpheres(spheres);
            arthur.setSphereList(sphereList);

            List<String> deckIds = deckLists[i];
            HashMap<String, ArthurSkill> deck = new HashMap<>();
            for (String card : deckIds) {
                String[] array = cardDataMap.get(card);
                ArthurSkill skill = new ArthurSkill();
                skill.setCardId(card);
                skill.setCardName(array[5]);
                skill.setRarity(array[6]);
                skill.setIsSphere(false);
                skill.setTurnAllowedAfter(0);
                skill.setArthurIndex(i);
                skill.setBriefDescription(array[7] + "/" + array[8] + "/" + array[9] + "C/" + array[14]);
                if (array[7].equals(EnumArthur.getNameSByIndex(i))) {
                    skill.setIsArBonus(true);
                    skill.setSkillId(array[3]);
                    skill.setDescription(array[17]);
                    for (int j = 0; j < 6; j++) {
                        if (Enums.CATEGORY_S[j].equals(array[14]) && j < 3) {
                            skill.setDialogue(array[18]);
                        } else if (Enums.CATEGORY_S[j].equals(array[14]) && j >= 3) {
                            skill.setDialogue(array[19]);
                        }
                    }
                } else {
                    skill.setIsArBonus(false);
                    skill.setSkillId(array[2]);
                    skill.setDescription(array[16]);
                    skill.setDialogue("");
                }
                skill.setDescription("<html>" + skill.getDescription().substring(0, 1)
                        + skill.getDescription().substring(1).replaceAll("【", "<br>【") + "</html>");
//                skill.setSkill(skillMap.get(skill.getSkillId()));
//                skill.setSkillRole(new HashMap<>());
//                for (String[] arr : skill.getSkill()) {
//                    skill.getSkillRole().put(arr[27], skillRoleMap.get(arr[27]));
//                }
                deck.put(skill.getSkillId(), skill);
            }
            arthur.setDeck(deck);

            Integer[] currentAttr = new Integer[9];
            for (int j = 0; j < 4; j++) {
                currentAttr[j] = Integer.parseInt(attrValLabels.get(i).get(j).getText());
            }
            currentAttr[4] = 0;
            currentAttr[5] = 0;
            currentAttr[6] = 0;
            currentAttr[7] = currentAttr[0];
            currentAttr[8] = 0;

            arthur.initCurrentAttr(currentAttr);
            arthurList.add(arthur);

            log.debug(arthur);
        }
        return arthurList;
    }

    public List<EnemyInfo> prepareEnemy(String enemyPartyId) {
        // Prepare Enemy
        String[] enemyPartyArray = enemyPartyMap.get(enemyPartyId);
        List<EnemyInfo> enemyList = new ArrayList<>();
        for (int i = 2; i < 12; i += 3) {
            if (enemyPartyArray[i].isEmpty()) {
                break;
            }
            EnemyInfo enemyInfo = new EnemyInfo(enemyPartyArray[i]);
            if (enemyPartyArray[i + 2].isEmpty()) {
                enemyInfo.setParent(-1);
            } else {
                enemyInfo.setParent(Integer.parseInt(enemyPartyArray[i + 2]) - 1);
                if (enemyList.get(Integer.parseInt(enemyPartyArray[i + 2]) - 1).getParts() == null) {
                    enemyList.get(Integer.parseInt(enemyPartyArray[i + 2]) - 1).setParts(new ArrayList<>());
                }
                enemyList.get(Integer.parseInt(enemyPartyArray[i + 2]) - 1).getParts().add(enemyInfo);
            }
            enemyList.add(enemyInfo);
        }

        // EnemyInfo
        for (int i = 0; i < enemyList.size(); i++) {
            EnemyInfo enemy = enemyList.get(i);
            String[] enemyArray = enemyMap.get(enemy.getId());
            enemy.setName(enemyArray[4]);
            enemy.setPartIndex(i);
            enemy.setOriginalType(enemyArray[5]);
            enemy.setType(enemyArray[5]);
            Integer[] enemyAttr = new Integer[9];
            for (int j = 0; j < 7; j++) {
                enemyAttr[j] = Integer.parseInt(enemyArray[6 + j]);
            }
            enemyAttr[7] = Integer.parseInt(enemyArray[6]);     // MAX_HP
            enemyAttr[8] = 0;                                   // CRIT
            enemy.initCurrentAttr(enemyAttr);

            String[] enemyLvUpArray = enemyLvUpMap.get(enemy.getId());
            enemy.setActionPoint(Integer.parseInt(enemyLvUpArray[23]));
            if (enemyLvUpArray.length > 24) {
                enemy.setPassiveSkill(enemyLvUpArray[24]);
            }
            Integer[] typeRate = new Integer[5];
            for (int j = 0; j < 5; j++) {
                typeRate[j] = Integer.parseInt(enemyLvUpArray[2 + j]);
            }
            enemy.setTypeRate(typeRate);

            List<EnemySkill> enSkillList = new ArrayList<>();
            // Super skill
            for (int j = 145; j < 178; j += 8) {
                if (enemyLvUpArray.length <= j || enemyLvUpArray[j].isEmpty()) {
                    break;
                }
                addEnemySkillToList(enemyLvUpArray, j, enSkillList);

            }
            // Normal Attack
            for (int j = 25; j < 26; j += 8) {
                if (enemyLvUpArray.length <= j || enemyLvUpArray[j].isEmpty()) {
                    break;
                }
                addEnemySkillToList(enemyLvUpArray, j, enSkillList);
            }
            // Normal Skill
            for (int j = 33; j < 138; j += 8) {
                if (enemyLvUpArray.length <= j || enemyLvUpArray[j].isEmpty()) {
                    break;
                }
                addEnemySkillToList(enemyLvUpArray, j, enSkillList);
            }
            Collections.sort(enSkillList);      // Sort by prioirty from smallest to largest.

            for (EnemySkill skill : enSkillList) {
                skill.setEnemyIndex(i);
            }
            enemy.setSkills(enSkillList);

            log.info(enemy);
        }
        return enemyList;
    }

    private void addEnemySkillToList(String[] enemyLvUpArray, int startIndex, List<EnemySkill> enSkillList) {
        try {
            EnemySkill skill = new EnemySkill(enemyLvUpArray[startIndex], enemyLvUpArray[startIndex + 1],
                    Integer.parseInt(enemyLvUpArray[startIndex + 2]), enemyLvUpArray[startIndex + 3], Integer.parseInt(enemyLvUpArray[startIndex + 4]),
                    Integer.parseInt(enemyLvUpArray[startIndex + 5]), Integer.parseInt(enemyLvUpArray[startIndex + 6]));
            enSkillList.add(skill);
        } catch (NumberFormatException ex) {
            log.warn(ex);
        }
    }

    private void outputEnemyData() {
        EnemyBasicInfo enemy = (EnemyBasicInfo) jComboBox2.getSelectedItem();
        String enemyPartyId = classifiedEnemyMap.get(enemy.getId()).get(jComboBox3.getSelectedIndex())[0];
        List<EnemyInfo> prepareEnemy = prepareEnemy(enemyPartyId);
        String level = EnumLevel.getName(classifiedEnemyMap.get(enemy.getId()).get(jComboBox3.getSelectedIndex())[2].substring(6, 7));
        EnemyInfoGenerator.createEnemyInfoExcel(level, prepareEnemy, this.skillMap, this.skillRoleMap, this.enemyAiOrderMap, this.enemyLvUpMap);
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulator;

import java.awt.Component;
import swing.ManualListCellRenderer;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.RowSorter;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.Document;
import util.FileUtils;

/**
 *
 * @author Shadow
 */
public class DeckSimu extends javax.swing.JPanel {

    /**
     * Creates new form DeckSimu
     */
    public DeckSimu() {
        initComponents();
        initComponentsByCode();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        panCost = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        panRarity = new javax.swing.JPanel();
        panFunction = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        panTarget = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        panClass = new javax.swing.JPanel();
        panType = new javax.swing.JPanel();
        panCategory = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        btnSaveDeck = new javax.swing.JButton();
        btnLoadDeck = new javax.swing.JButton();

        jLabel10.setText("关键字：");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "显示卡牌名称", "显示卡牌效果", "显示卡牌属性" }));

        panCost.setBorder(javax.swing.BorderFactory.createTitledBorder("Cost"));

        javax.swing.GroupLayout panCostLayout = new javax.swing.GroupLayout(panCost);
        panCost.setLayout(panCostLayout);
        panCostLayout.setHorizontalGroup(
            panCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 52, Short.MAX_VALUE)
        );
        panCostLayout.setVerticalGroup(
            panCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton8.setText("设为队长");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        panRarity.setBorder(javax.swing.BorderFactory.createTitledBorder("稀有度"));

        javax.swing.GroupLayout panRarityLayout = new javax.swing.GroupLayout(panRarity);
        panRarity.setLayout(panRarityLayout);
        panRarityLayout.setHorizontalGroup(
            panRarityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panRarityLayout.setVerticalGroup(
            panRarityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        panFunction.setBorder(javax.swing.BorderFactory.createTitledBorder("效果"));

        javax.swing.GroupLayout panFunctionLayout = new javax.swing.GroupLayout(panFunction);
        panFunction.setLayout(panFunctionLayout);
        panFunctionLayout.setHorizontalGroup(
            panFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panFunctionLayout.setVerticalGroup(
            panFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 168, Short.MAX_VALUE)
        );

        jButton2.setText("全选");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("清空");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        panTarget.setBorder(javax.swing.BorderFactory.createTitledBorder("目标"));

        javax.swing.GroupLayout panTargetLayout = new javax.swing.GroupLayout(panTarget);
        panTarget.setLayout(panTargetLayout);
        panTargetLayout.setHorizontalGroup(
            panTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );
        panTargetLayout.setVerticalGroup(
            panTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton4.setText("清空效果");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("全选效果");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "名称", "稀有度", "职业", "属性", "Cost", "HP", "物攻", "魔攻", "恢复量", "技能描述"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        jList1.setBackground(new java.awt.Color(240, 240, 240));
        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder("卡组（可双击插入或移除）"));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("属性"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );

        panClass.setBorder(javax.swing.BorderFactory.createTitledBorder("职业"));

        javax.swing.GroupLayout panClassLayout = new javax.swing.GroupLayout(panClass);
        panClass.setLayout(panClassLayout);
        panClassLayout.setHorizontalGroup(
            panClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 61, Short.MAX_VALUE)
        );
        panClassLayout.setVerticalGroup(
            panClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panType.setBorder(javax.swing.BorderFactory.createTitledBorder("属性"));

        javax.swing.GroupLayout panTypeLayout = new javax.swing.GroupLayout(panType);
        panType.setLayout(panTypeLayout);
        panTypeLayout.setHorizontalGroup(
            panTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );
        panTypeLayout.setVerticalGroup(
            panTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panCategory.setBorder(javax.swing.BorderFactory.createTitledBorder("类别"));

        javax.swing.GroupLayout panCategoryLayout = new javax.swing.GroupLayout(panCategory);
        panCategory.setLayout(panCategoryLayout);
        panCategoryLayout.setHorizontalGroup(
            panCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 61, Short.MAX_VALUE)
        );
        panCategoryLayout.setVerticalGroup(
            panCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 163, Short.MAX_VALUE)
        );

        jButton6.setText("加入卡组");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("移出卡组");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton1.setText("重置卡组");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton9.setText("输出到剪贴板");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        btnSaveDeck.setText("保存卡组");
        btnSaveDeck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDeckActionPerformed(evt);
            }
        });

        btnLoadDeck.setText("载入卡组");
        btnLoadDeck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDeckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(3, 3, 3)
                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(3, 3, 3)
                                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnLoadDeck, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSaveDeck, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panRarity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panFunction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panFunction, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panCategory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panCost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panTarget, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(panRarity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSaveDeck, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLoadDeck, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        setSelectAsLeader();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int i = 0;
        for (List<JCheckBox> list : searchCondition.values()) {
            conditionIsSelected[i] = true;
            i++;
            for (JCheckBox chk : list) {
                chk.setSelected(true);
            }
        }
        search();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int i = 0;
        for (List<JCheckBox> list : searchCondition.values()) {
            conditionIsSelected[i] = false;
            i++;
            for (JCheckBox chk : list) {
                chk.setSelected(false);
            }
        }
        search();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        List<JCheckBox> list = searchCondition.get(6);
        conditionIsSelected[6] = false;
        for (JCheckBox chk : list) {
            chk.setSelected(false);
        }
        search();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        List<JCheckBox> list = searchCondition.get(6);
        conditionIsSelected[6] = true;
        for (JCheckBox chk : list) {
            chk.setSelected(true);
        }
        search();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        addSelectRow();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        removeSelectRow();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        resetDeck();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        outputDeck();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void btnSaveDeckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDeckActionPerformed
        saveDeck();
    }//GEN-LAST:event_btnSaveDeckActionPerformed

    private void btnLoadDeckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDeckActionPerformed
        loadDeck();
    }//GEN-LAST:event_btnLoadDeckActionPerformed

    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblAtk;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblInt;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblMnd;
    private javax.swing.JLabel lblHp;
    private List<JLabel> attrList;
    private Map<String, Integer[]> classAttrMap;
    private Map<Integer, List<JCheckBox>> searchCondition;
    private final String[] conditions = new String[]{"Class", "Type", "Cost", "Category", "Rarity", "Target", "Function"};
    private List<JPanel> searchConditionPanels;
    private Boolean[] conditionIsSelected;
    private ArrayList<String> currentDeck;
    private Map<String, String[]> dataMap;
    private HashSet<Integer> keywordCols;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoadDeck;
    private javax.swing.JButton btnSaveDeck;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel panCategory;
    private javax.swing.JPanel panClass;
    private javax.swing.JPanel panCost;
    private javax.swing.JPanel panFunction;
    private javax.swing.JPanel panRarity;
    private javax.swing.JPanel panTarget;
    private javax.swing.JPanel panType;
    // End of variables declaration//GEN-END:variables
   private void initComponentsByCode() {
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel4 = new JLabel();
        lblAtk = new JLabel();
        jLabel6 = new JLabel();
        lblInt = new JLabel();
        jLabel8 = new JLabel();
        lblMnd = new JLabel();
        lblHp = new JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"佣兵", "富豪", "盗贼", "歌姬"}));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("职业：");
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("HP：");
        lblHp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("物攻：");
        lblAtk.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAtk.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("魔攻：");
        lblInt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInt.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("治疗量：");
        lblMnd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMnd.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);

        jPanel1.setLayout(jPanel1Layout);

        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox1, 0, 138, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblHp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblAtk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblInt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblMnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblHp, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblAtk, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblInt, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblMnd, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        attrList = new ArrayList<>();
        attrList.add(lblHp);
        attrList.add(lblAtk);
        attrList.add(lblInt);
        attrList.add(lblMnd);

        searchCondition = new HashMap<>();
        searchConditionPanels = new ArrayList<>();
        searchConditionPanels.add(panClass);
        int i = 0, j = 0;
        searchCondition.put(j, new ArrayList<>());
        searchCondition.get(j).add(new JCheckBox("佣兵", null, true));
        searchCondition.get(j).add(new JCheckBox("富豪", null, true));
        searchCondition.get(j).add(new JCheckBox("盗贼", null, true));
        searchCondition.get(j).add(new JCheckBox("歌姬", null, true));
        searchCondition.get(j).add(new JCheckBox("通用", null, true));
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(panClass);
        panClass.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        i = 0;
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addGap(0, 0, Short.MAX_VALUE))
        );

        j++;
        searchConditionPanels.add(panType);
        searchCondition.put(j, new ArrayList<>());
        searchCondition.get(j).add(new JCheckBox("火", null, true));
        searchCondition.get(j).add(new JCheckBox("风", null, true));
        searchCondition.get(j).add(new JCheckBox("冰", null, true));
        searchCondition.get(j).add(new JCheckBox("暗", null, true));
        searchCondition.get(j).add(new JCheckBox("光", null, true));
        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(panType);
        panType.setLayout(jPanel3Layout);
        i = 0;
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        .addContainerGap(15, Short.MAX_VALUE))
        );
        i = 0;
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++)))
        );

        j++;
        searchConditionPanels.add(panCost);
        searchCondition.put(j, new ArrayList<>());
        searchCondition.get(j).add(new JCheckBox("5+", null, true));
        searchCondition.get(j).add(new JCheckBox("4", null, true));
        searchCondition.get(j).add(new JCheckBox("3", null, true));
        searchCondition.get(j).add(new JCheckBox("2", null, true));
        searchCondition.get(j).add(new JCheckBox("1", null, true));
        i = 0;
        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(panCost);
        panCost.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        .addContainerGap(15, Short.MAX_VALUE))
        );
        i = 0;
        jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++)))
        );

        j++;
        searchConditionPanels.add(panCategory);
        searchCondition.put(j, new ArrayList<>());
        searchCondition.get(j).add(new JCheckBox("物理", null, true));
        searchCondition.get(j).add(new JCheckBox("支援", null, true));
        searchCondition.get(j).add(new JCheckBox("治疗", null, true));
        searchCondition.get(j).add(new JCheckBox("魔法", null, true));
        searchCondition.get(j).add(new JCheckBox("弱化", null, true));
        searchCondition.get(j).add(new JCheckBox("防御", null, true));
        i = 0;
        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(panCategory);
        panCategory.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                //                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                                //                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        .addContainerGap())
        );
        i = 0;
        jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        //.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        //                                .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        j++;
        searchConditionPanels.add(panRarity);
        searchCondition.put(j, new ArrayList<>());
        searchCondition.get(j).add(new JCheckBox("UR", null, true));
        searchCondition.get(j).add(new JCheckBox("MR", null, true));
        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(panRarity);
        panRarity.setLayout(jPanel6Layout);
        i = 0;
        jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchCondition.get(j).get(i++), javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchCondition.get(j).get(i++), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
        );
        i = 0;
        jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(searchCondition.get(j).get(i++))
                .addComponent(searchCondition.get(j).get(i++))
        );

        j++;
        searchConditionPanels.add(panTarget);
        searchCondition.put(j, new ArrayList<>());
        searchCondition.get(j).add(new JCheckBox("自身", null, true));
        searchCondition.get(j).add(new JCheckBox("己方1人", null, true));
        searchCondition.get(j).add(new JCheckBox("己方全体", null, true));
        searchCondition.get(j).add(new JCheckBox("敌单体", null, true));
        searchCondition.get(j).add(new JCheckBox("敌全体", null, true));
        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(panTarget);
        panTarget.setLayout(jPanel8Layout);
        i = 0;
        jPanel8Layout.setHorizontalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        .addContainerGap(15, Short.MAX_VALUE))
        );
        i = 0;
        jPanel8Layout.setVerticalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCondition.get(j).get(i++)))
        );

        j++;
        searchConditionPanels.add(panFunction);
        searchCondition.put(j, new ArrayList<>());
        searchCondition.get(j).add(new JCheckBox("攻击", null, true));
        searchCondition.get(j).add(new JCheckBox("物攻↑", null, true));
        searchCondition.get(j).add(new JCheckBox("魔攻↑", null, true));
        searchCondition.get(j).add(new JCheckBox("暴击↑", null, true));
        searchCondition.get(j).add(new JCheckBox("破防", null, true));
        searchCondition.get(j).add(new JCheckBox("反伤", null, true));
        searchCondition.get(j).add(new JCheckBox("吸血", null, true));

        searchCondition.get(j).add(new JCheckBox("治疗", null, true));
        searchCondition.get(j).add(new JCheckBox("延迟奶", null, true));
        searchCondition.get(j).add(new JCheckBox("治疗↑", null, true));
        searchCondition.get(j).add(new JCheckBox("解异常", null, true));
        searchCondition.get(j).add(new JCheckBox("抗封印", null, true));
        searchCondition.get(j).add(new JCheckBox("抗黑暗", null, true));
        searchCondition.get(j).add(new JCheckBox("打断", null, true));

        searchCondition.get(j).add(new JCheckBox("物防↑", null, true));
        searchCondition.get(j).add(new JCheckBox("魔防↑", null, true));
        searchCondition.get(j).add(new JCheckBox("嘲讽", null, true));
        searchCondition.get(j).add(new JCheckBox("抽卡", null, true));
        searchCondition.get(j).add(new JCheckBox("物防↓", null, true));
        searchCondition.get(j).add(new JCheckBox("魔防↓", null, true));
        searchCondition.get(j).add(new JCheckBox("标记", null, true));

        searchCondition.get(j).add(new JCheckBox("物攻↓", null, true));
        searchCondition.get(j).add(new JCheckBox("魔攻↓", null, true));
        searchCondition.get(j).add(new JCheckBox("冻结", null, true));
        searchCondition.get(j).add(new JCheckBox("裂风", null, true));
        searchCondition.get(j).add(new JCheckBox("中毒", null, true));
        searchCondition.get(j).add(new JCheckBox("感电", null, true));
        searchCondition.get(j).add(new JCheckBox("点燃", null, true));

        searchCondition.get(j).add(new JCheckBox("属性不利无效", null, true));
        searchCondition.get(j).add(new JCheckBox("揭露隐藏属性", null, true));
        searchCondition.get(j).add(new JCheckBox("自身数值加伤", null, true));
        searchCondition.get(j).add(new JCheckBox("追伤", null, true));
        searchCondition.get(j).add(new JCheckBox("最大HP↑", null, true));
        searchCondition.get(j).add(new JCheckBox("比例扣血", null, true));
        
        i = 0;
        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(panFunction);
        panFunction.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++))
                                .addComponent(searchCondition.get(j).get(i++)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        i = 0;
        jPanel7Layout.setVerticalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCondition.get(j).get(i++))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        ))
        );

        conditionIsSelected = new Boolean[searchCondition.size()];
        for (i = 0; i < searchCondition.size(); i++) {
            conditionIsSelected[i] = true;
        }

        TableRowSorter rowSorter = new TableRowSorter<>(jTable1.getModel());
        jTable1.setRowSorter(rowSorter);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
        jTable1.getColumnModel().getColumn(0).setMinWidth(0);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(140);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(9).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(10).setPreferredWidth(1000);
        }

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                //System.out.println(evt.getClickCount() + " | " + jTable1.getSelectedRow());
                if (evt.getClickCount() == 2) {
                    addSelectRow();
                }
            }
        }
        );

        DefaultListModel model = new DefaultListModel();
        jList1.setModel(model);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                //System.out.println(evt.getClickCount() + " | " + jList1.getSelectedIndex());
                if (evt.getClickCount() % 2 == 0) {
                    removeSelectRow();
                }
            }
        });

        ListCellRenderer lcr = new ManualListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value,
                    int index, boolean isSelected, boolean cellHasFocus) {
                String[] data = dataMap.get(currentDeck.get(index));
                String description = dataMap.get(currentDeck.get(index))[17];
                StringBuilder sb = new StringBuilder();
                sb.append("<html>").append(data[5]).append("<br>");
                sb.append(data[7]).append("/").append(data[8]).append("/").append(data[9]).append("C/").append(data[14]).append("/").append(data[15]).append("<br>");
                sb.append("HP：").append(data[10]).append(" 物攻：").append(data[11]).append(" 魔攻：").append(data[12]).append(" 治疗：").append(data[13]).append("<br>");
                sb.append(data[17].replace("【", "<br>【")).append("</html>");
                list.setToolTipText(sb.toString());
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        };

        jList1.setCellRenderer(lcr);

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshList();
            }
        });

        classAttrMap = new HashMap<>();

        classAttrMap.put("佣兵", new Integer[]{2650, 480, 50, 190});
        classAttrMap.put("富豪", new Integer[]{4620, 330, 70, 40});
        classAttrMap.put("盗贼", new Integer[]{2080, 100, 480, 240});
        classAttrMap.put("歌姬", new Integer[]{2190, 50, 330, 480});

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshAttributes();
            }
        });

        Document dt = jTextField1.getDocument();
        dt.addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                //System.out.println("3: " + jTextField1.getText());
            }
        });

        for (i = 0; i < searchCondition.size(); i++) {
            List<JCheckBox> chkList = searchCondition.get(i);
            final int n = i;
            ActionListener acSearch = new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    checkConditionSelected(n);
                    search();
                }
            };
            for (JCheckBox chk : chkList) {
                chk.addActionListener(acSearch);
            }
        }

        for (i = 0; i < searchConditionPanels.size(); i++) {
            final int n = i;
            searchConditionPanels.get(i).addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (evt.getClickCount() % 2 == 0) {
                        selectAllOptions(n);
                    }
                }
            });
        }

    }

    private void initData() {
        try {
//            File f = new File("card_data.csv");
//            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(f), "UTF-8"));
            InputStream is = this.getClass().getResourceAsStream("/resources/card_data.csv");
            BufferedReader br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
            String line;
            dataMap = new TreeMap<>();
            //Pattern p = Pattern.compile("[\\d]+");
            while ((line = br.readLine()) != null) {
                String[] lineArray = line.split(",");
                if (lineArray.length > 0 && lineArray[0] != null && lineArray[0].matches("[\\d]+")) {
                    dataMap.put(lineArray[0], lineArray);
                    //System.out.println(line);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        currentDeck = new ArrayList<>();
        keywordCols = new HashSet<>();
        Collections.addAll(keywordCols, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17);

        refreshList();
        refreshAttributes();

        search();
    }

    private void selectAllOptions(Integer index) {
        if (conditionIsSelected[index]) {
            conditionIsSelected[index] = false;
        } else {
            conditionIsSelected[index] = true;
        }
        for (JCheckBox chk : searchCondition.get(index)) {
            chk.setSelected(conditionIsSelected[index]);
        }
        search();
    }

    private void checkConditionSelected(Integer index) {
        for (JCheckBox chk : searchCondition.get(index)) {
            if (chk.isSelected() == conditionIsSelected[index]) {
                return;
            }
        }
        conditionIsSelected[index] = !conditionIsSelected[index];
    }

    private void addSelectRow() {
        if (jTable1.getSelectedRow() == -1) {
            return;
        }
        if (currentDeck.size() >= 10) {
            JOptionPane.showMessageDialog(this, "卡组中最多只能有10张卡牌。", "注意", JOptionPane.WARNING_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String id = model.getValueAt(jTable1.convertRowIndexToModel(jTable1.getSelectedRow()), 0).toString();
        if (currentDeck.contains(dataMap.get(id)[0])) {
            JOptionPane.showMessageDialog(this, "同一张卡牌不能多次放入卡组。", "注意", JOptionPane.WARNING_MESSAGE);
            return;
        }
        for (String cardId : currentDeck) {
            if (dataMap.get(id)[1].equals(dataMap.get(cardId)[1])) {
                JOptionPane.showMessageDialog(this, dataMap.get(id)[5] + "（" + dataMap.get(id)[7] + "）与"
                        + dataMap.get(cardId)[5] + "（" + dataMap.get(cardId)[7] + "）与" + "不能同时放入卡组。", "注意", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        currentDeck.add(dataMap.get(id)[0]);
        refreshList();
        refreshAttributes();
    }

    private void removeSelectRow() {
        if (jList1.getSelectedIndex() == -1) {
            return;
        }
        String id = (String) jList1.getSelectedValue();
        currentDeck.remove(jList1.getSelectedIndex());
        refreshList();
        refreshAttributes();
    }

    private void refreshList() {
        DefaultListModel model = (DefaultListModel) jList1.getModel();
        model.removeAllElements();
        for (String str : currentDeck) {
            if (jComboBox2.getSelectedItem().equals("显示卡牌名称")) {
                model.addElement(dataMap.get(str)[5]);
            } else if (jComboBox2.getSelectedItem().equals("显示卡牌效果")) {
                model.addElement(dataMap.get(str)[7] + "/" + dataMap.get(str)[8] + "/" + dataMap.get(str)[9] + "C/" + dataMap.get(str)[14] + "/" + dataMap.get(str)[15]);
            } else {
                model.addElement("HP：" + dataMap.get(str)[10] + " 物攻：" + dataMap.get(str)[11] + " 魔攻：" + dataMap.get(str)[12] + " 治疗：" + dataMap.get(str)[13]);
            }
        }
    }

    private void refreshAttributes() {
        Integer[] attr = classAttrMap.get(jComboBox1.getSelectedItem().toString());
        Integer[] totalAttr = new Integer[4];
        for (int i = 0; i < attrList.size(); i++) {
            totalAttr[i] = attr[i];
            for (int j = 0; j < currentDeck.size(); j++) {
                if (j == 0) {
                    totalAttr[i] += new BigDecimal(Integer.parseInt(dataMap.get(currentDeck.get(j))[i + 10])).multiply(new BigDecimal(1.5)).intValue();
                } else {
                    totalAttr[i] += Integer.parseInt(dataMap.get(currentDeck.get(j))[i + 10]);
                }
            }
            attrList.get(i).setText(totalAttr[i].toString());
        }
    }

    private void setSelectAsLeader() {
        if (jList1.getSelectedIndex() == -1 || jList1.getSelectedIndex() == 0) {
            return;
        }
        String id = currentDeck.get(jList1.getSelectedIndex());
        currentDeck.remove(id);
        currentDeck.add(0, id);
        refreshList();
        refreshAttributes();
    }

    private boolean inFilter(String[] strArray) {
        // Filter class;
        String val;
        int i = 0;
        List<JCheckBox> chkList;

        val = strArray[7];
        chkList = searchCondition.get(i++);
        for (JCheckBox chk : chkList) {
            if (chk.getText().equals(val) && !chk.isSelected()) {
                return false;
            }
        }

        val = strArray[8];
        chkList = searchCondition.get(i++);
        boolean bool = false;
        for (JCheckBox chk : chkList) {
            if (val.contains(chk.getText()) && chk.isSelected()) {
                bool = true;
            }
        }
        if (!bool) {
            return bool;
        }

        val = strArray[9];
        chkList = searchCondition.get(i++);
        bool = false;
        for (JCheckBox chk : chkList) {
            if (chk.getText().equals("5+") && chk.isSelected() && (Integer.parseInt(val) >= 5)) {
                bool = true;
            } else if (chk.getText().equals(val) && chk.isSelected()) {
                bool = true;
            }
        }
        if (!bool) {
            return bool;
        }

        val = strArray[14];
        chkList = searchCondition.get(i++);
        for (JCheckBox chk : chkList) {
            if (chk.getText().equals(val) && !chk.isSelected()) {
                return false;
            }
        }

        val = strArray[6];
        chkList = searchCondition.get(i++);
        for (JCheckBox chk : chkList) {
            if (chk.getText().equals(val) && !chk.isSelected()) {
                return false;
            }
        }

        val = strArray[17];
        chkList = searchCondition.get(i++);
        bool = false;
        for (JCheckBox chk : chkList) {
            if (val.contains(chk.getText()) && chk.isSelected()) {
                bool = true;
            }
        }
        if (!bool) {
            return bool;
        }

        val = strArray[15];
        chkList = searchCondition.get(i++);
        bool = false;
        for (JCheckBox chk : chkList) {
            if (val.contains(chk.getText()) && chk.isSelected()) {
                bool = true;
            }
        }
        if (!bool) {
            return bool;
        }

        val = jTextField1.getText();
        bool = false;
        for (int j = 0; j < strArray.length; j++) {
            if (!keywordCols.contains(j)) {
                continue;
            }
            String str = strArray[j];
            if (str.contains(val)) {
                bool = true;
            }
        }
        if (!bool) {
            return bool;
        }

        return true;
    }

    private void search() {
        RowSorter rs = jTable1.getRowSorter();
        List sortKeys = rs.getSortKeys();
        rs.setSortKeys(null);

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (String[] strArray : dataMap.values()) {
            if (!inFilter(strArray)) {
                continue;
            }
            int i = 0;
            Object[] row = new Object[11];
            row[i++] = strArray[0];
            row[i++] = strArray[5];
            row[i++] = strArray[6];
            row[i++] = strArray[7];
            row[i++] = strArray[8];

            row[i++] = Integer.parseInt(strArray[9]);
            row[i++] = Integer.parseInt(strArray[10]);
            row[i++] = Integer.parseInt(strArray[11]);
            row[i++] = Integer.parseInt(strArray[12]);
            row[i++] = Integer.parseInt(strArray[13]);

            row[i++] = strArray[17];
            model.addRow(row);
        }

        rs.setSortKeys(sortKeys);
    }

    private void outputDeck() {
        StringBuilder sb = new StringBuilder();
        sb.append("——————————————卡组信息————————————————\n");
        for (int j = 0; j < currentDeck.size(); j++) {
            String[] data = dataMap.get(currentDeck.get(j));
            sb.append("【").append(data[5]).append("】");
            sb.append(data[7]).append("/").append(data[8]).append("/").append(data[9]).append("C | ");
            if (j == 0) {
                sb.append("（队长）");
            }
            sb.append(data[17]).append("\n");
        }

        sb.append("——————————————职业信息————————————————\n");
        sb.append("职业：").append(jComboBox1.getSelectedItem()).append("\n");
        sb.append("HP：").append(lblHp.getText()).append("     ");
        sb.append("物理攻击：").append(lblAtk.getText()).append("     ");
        sb.append("魔法攻击：").append(lblInt.getText()).append("     ");
        sb.append("治疗量：").append(lblMnd.getText()).append("\n");
        sb.append("——————————————输出完毕————————————————\n");
        Clipboard clip = getToolkit().getSystemClipboard();
        Transferable tText = new StringSelection(sb.toString());
        clip.setContents(tText, null);
        JOptionPane.showMessageDialog(this, "已输出到剪贴板。", "完成", JOptionPane.INFORMATION_MESSAGE);

    }

    private void resetDeck() {
        currentDeck.clear();
        refreshList();
        refreshAttributes();
    }

    private void saveDeck() {
        if (currentDeck.isEmpty()) {
            JOptionPane.showMessageDialog(this, "当前卡组为空。", "注意", JOptionPane.WARNING_MESSAGE);
            return;
        }
        File file = FileUtils.getChooser().showSaveDialog();
        if (file == null) {
            return;
        }
        if (!file.getName().endsWith("MAdeck")) {
            file = new File(file.getPath() + ".MAdeck");
        }
        try {
            FileUtils.setCurrentPath(file.getParent());
            BufferedWriter br = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
            StringBuilder sb = new StringBuilder();
            for (String str : currentDeck) {
                sb.append(str).append(",");
            }
            sb.deleteCharAt(sb.length() - 1);
            br.write(sb.toString(), 0, sb.length());
            br.flush();
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void loadDeck() {
        File file = FileUtils.getChooser().showOpenDialog();
        if (file != null) {
            FileUtils.setCurrentPath(file.getParent());
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
                currentDeck = new ArrayList<>();
                for (String str : br.readLine().split(",")) {
                    currentDeck.add(str);
                }
                br.close();
                refreshList();
                refreshAttributes();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

}
